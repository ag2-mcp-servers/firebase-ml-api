# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:08:29+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ModelFormat(Enum):
    MODEL_FORMAT_UNSPECIFIED = 'MODEL_FORMAT_UNSPECIFIED'
    TFLITE = 'TFLITE'


class DownloadModelResponse(BaseModel):
    downloadUri: Optional[str] = Field(
        None, description='Output only. A download URI for the model/zip file.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. The time that the download URI link expires. If the link has expired, the REST call must be repeated.',
    )
    modelFormat: Optional[ModelFormat] = Field(
        None, description='Output only. The format of the model being downloaded.'
    )
    sizeBytes: Optional[str] = Field(
        None,
        description='Output only. The size of the file(s), if this information is available.',
    )


class Empty(BaseModel):
    pass


class BasicOperationStatus(Enum):
    BASIC_OPERATION_STATUS_UNSPECIFIED = 'BASIC_OPERATION_STATUS_UNSPECIFIED'
    BASIC_OPERATION_STATUS_UPLOADING = 'BASIC_OPERATION_STATUS_UPLOADING'
    BASIC_OPERATION_STATUS_VERIFYING = 'BASIC_OPERATION_STATUS_VERIFYING'


class ModelOperationMetadata(BaseModel):
    basicOperationStatus: Optional[BasicOperationStatus] = None
    name: Optional[str] = Field(
        None,
        description='The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TfLiteModel(BaseModel):
    automlModel: Optional[str] = Field(
        None,
        description="The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)",
    )
    gcsTfliteUri: Optional[str] = Field(
        None,
        description='The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.',
    )
    sizeBytes: Optional[str] = Field(
        None, description='Output only. The size of the TFLite model'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ModelState(BaseModel):
    published: Optional[bool] = Field(
        None, description='Indicates if this model has been published.'
    )
    validationError: Optional[Status] = Field(
        None,
        description='Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Model(BaseModel):
    activeOperations: Optional[List[Operation]] = Field(
        None,
        description='Output only. Lists operation ids associated with this model whose status is NOT done.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp when this model was created in Firebase ML.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3',
    )
    modelHash: Optional[str] = Field(
        None,
        description='Output only. The model_hash will change if a new file is available for download.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.',
    )
    state: Optional[ModelState] = Field(
        None,
        description='State common to all model types. Includes publishing and validation information.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='User defined tags which can be used to group/filter models during listing',
    )
    tfliteModel: Optional[TfLiteModel] = Field(None, description='A TFLite Model')
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp when this model was updated in Firebase ML.',
    )


class ListModelsResponse(BaseModel):
    models: Optional[List[Model]] = Field(None, description='The list of models')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
